Documentation for Common Friends:
1] First, we read the document file containing the input and store it in a rdd element and display it using a collect() function.
>>> rdd=sc.textFile("friends.txt")
>>> rdd.collect()
[u'1:2,3,4,5,6,7,8,9,10,11,12,13,14', u'2:1,3,4,5,6,7,10,11', u'3:2,1,4,5,6,9', u'4:1,2,3,41,42,43,44,45,46,47', u'10:2,1,20,30,40,50,60,70', u'5:7,3,2,1,51,52,53,54,55,56,57,58,59', u'7:1,2,71,72,73,74,75,76,77,78,79,51,52,53,54,55,56,57,58,59', u'8:1,11,12,13,14,15,16,17,18,19,20,21,22', u'9:1,3,51,52,53,54,55,56,57', u'11:1,2,8,51,52,53,54,55,56,57', u'6:1,2,3,51,52,53,54,55,56,57']

2] Next, we define a mapper function which will split this document in key-value apairs. It does so by splitting according to a ":". This signifies that whatever is after the ":" is values and before that is the key per line. It further splits the sttring of values into an array/list so that it can iterate through the list to give an output of form (AB)->BCD where A is the key and B is one of the values among BCD. This step enables us to get started to find mutual friends 
>>> def mapper(seq):
...   tokens=seq.split(":")
...   friends=tokens[1].split(",")
...   L1=[((tokens[0],friend),friends) for friend in friends]
...   return L1
... 
3] By using flatMap on the mapper function we can display it as a sequence of k-v pairs.
>>> rdd1=rdd.flatMap(mapper)
>>> rdd1.collect() # This output is pretty large to display

4] now I have used a filter to separate the bigger rdd which contains keys of the form (3,4) and (4,3). Since (3,4) is the same as (4,3), I want to make it the same. On the bigger rdd it is difficult to perform operations having both of them. So, I have split it into rdds one which contains (3,4) form and one which contains (4,3) form. This 3,4 and 4,3 are indexes of the key.
>>> rdd2=rdd1.filter(lambda x: int(x[0][0])<int(x[0][1]))
>>> rdd2.collect() # This output is pretty large to display
5] for this step, since it contains 4,3 form I want to make it to 3,4 and hence a mapper is used to do the swapping.
>>> rdd3=rdd1.filter(lambda x: int(x[0][0])>int(x[0][1])).map(lambda x:((x[0][1],x[0][0]),x[1]))
>>> rdd3.collect() # This output is pretty large to display

5]now that the keys are in the same form, I can bring them back together in a bigger rdd and group them by their keys and map their values in form of a list so say 1:2,3,4,5 and 2:3,4,6 will be displayed as ((1,2),[2,3,4,5][3,4,6]). Basically all values are combined and displayed as a list.
>>> rdd4=rdd2+rdd3
>>> rdd4.collect() # This output is pretty large to display
>>> rdd5=rdd4.groupByKey().mapValues(lambda x: list(x))
>>> rdd5.collect() # This output is pretty large to display

6]A mutual friend between two friends is a friend who is shared between two users and hence we want to filter out those friends who are not mutual.So, if there isn't more than one occurence in the list values of a friend,i.e. if there are not a minimum of two index positions in the value of the list between two people it is filtered out. 
>>> rdd6 = rdd5.filter(lambda x: len(x[1])>1) 
>>> rdd6.collect() # This output is pretty large to display

7]Now, we have to find intersection of two lists in the values ,i.e. (1,2),[3,4,5,6][3,5,7,8] should return (1,2),[3,5], i.e. out of the two lists in values 3,5 are the common elements and these should have been returned. Hence a function is defined which will give this. I took an empty dictionary and should a match occur it will be appended to that dictionary thereby giving me my desired result


def mutual(friends):
    fr=[]
    for val in friends[0]:
      for val2 in friends[1]:
        if val==val2:
          fr.append(val)
    return fr


rdd7 = rdd6.map(lambda x: (x[0], mutual(x[1])))
rdd7.collect()
[((u'3', u'9'), [u'1']), ((u'3', u'5'), [u'2', u'1']), ((u'1', u'5'), [u'2', u'3', u'7']), ((u'2', u'10'), [u'1']), ((u'2', u'4'), [u'1', u'3']), ((u'1', u'11'), [u'2', u'8']), ((u'1', u'9'), [u'3']), ((u'1', u'7'), [u'2']), ((u'2', u'6'), [u'1', u'3']), ((u'1', u'3'), [u'2', u'4', u'5', u'6', u'9']), ((u'1', u'6'), [u'2', u'3']), ((u'2', u'7'), [u'1']), ((u'1', u'2'), [u'3', u'4', u'5', u'6', u'7', u'10', u'11']), ((u'3', u'4'), [u'2', u'1']), ((u'2', u'3'), [u'1', u'4', u'5', u'6']), ((u'8', u'11'), [u'1']), ((u'1', u'8'), [u'11', u'12', u'13', u'14']), ((u'1', u'4'), [u'2', u'3']), ((u'2', u'11'), [u'1']), ((u'2', u'5'), [u'1', u'3', u'7']), ((u'3', u'6'), [u'2', u'1']), ((u'1', u'10'), [u'2'])]

8] since we want only those two people who have more than two common friends, we calculate count of number of friends between two people. Only if this count of mutual friends is greater than two,the people's pair will be displayed. So (1,2) if have more than 2 friends their names will be displayed. A list of their friends is already displayed in rdd7. but if they have less than 2 friends their names wont be displayed as the final output.
>>> rdd8 = rdd7.map(lambda x: (x[0],len(x[1])))
>>> rdd8.collect()
[((u'3', u'9'), 1), ((u'3', u'5'), 2), ((u'1', u'5'), 3), ((u'2', u'10'), 1), ((u'2', u'4'), 2), ((u'1', u'11'), 2), ((u'1', u'9'), 1), ((u'1', u'7'), 1), ((u'2', u'6'), 2), ((u'1', u'3'), 5), ((u'1', u'6'), 2), ((u'2', u'7'), 1), ((u'1', u'2'), 7), ((u'3', u'4'), 2), ((u'2', u'3'), 4), ((u'8', u'11'), 1), ((u'1', u'8'), 4), ((u'1', u'4'), 2), ((u'2', u'11'), 1), ((u'2', u'5'), 3), ((u'3', u'6'), 2), ((u'1', u'10'), 1)]
>>> rdd9 = rdd8.filter(lambda x: x[1]>2)
>>> rdd9.collect()
[((u'1', u'5'), 3), ((u'1', u'3'), 5), ((u'1', u'2'), 7), ((u'2', u'3'), 4), ((u'1', u'8'), 4), ((u'2', u'5'), 3)]
 // This is the final output



